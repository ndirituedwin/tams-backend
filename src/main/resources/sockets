https://socketio.github.io/engine.io-server-java/install.html
https://trinopoty.github.io/socket.io-server-java/using.html
https://socket.io/docs/v4/
https://socketio.github.io/socket.io-client-java/initialization.html
https://stackoverflow.com/questions/67157694/spring-boot-sockjs-vs-socket-io
https://socket.io/blog/native-socket-io-and-android/
https://github.com/socketio/socket.io-client-java/blob/main/src/main/java/io/socket/client/Socket.java
https://github.com/jamesjieye/netty-socketio.spring/blob/master/src/main/java/com/jamesye/starter/realtimeserver/modules/chat/ChatModule.java
https://github.com/mrniko/netty-socketio
https://github.com/socketio/engine.io-server-java
https://socketio.github.io/socket.io-client-java/listening_to_events.html
https://tutorialedge.net/typescript/angular/angular-socket-io-tutorial/

https://stackoverflow.com/questions/41052244/replace-java-socket-client-with-the-socket-io-client-in-angular-2
https://stackoverflow.com/questions/48615713/angular-4-socket-io-connection-with-spring-websocket
https://stackoverflow.com/questions/48615713/angular-4-socket-io-connection-with-spring-websocket
https://stackoverflow.com/questions/67885399/angular-client-server-error-on-connection-to-netty-socket-io-server

/*

		final ServerWrapper serverWrapper = new ServerWrapper("localhost", 9099, null); // null means "allow all" as stated in https://github.com/socketio/engine.io-server-java/blob/f8cd8fc96f5ee1a027d9b8d9748523e2f9a14d2a/engine.io-server/src/main/java/io/socket/engineio/server/EngineIoServerOptions.java#L26
		try {
			serverWrapper.startServer();
		} catch (Exception e) {
			e.printStackTrace();
		}
		SocketIoServer server = serverWrapper.getSocketIoServer();
		SocketIoNamespace ns = server.namespace("/");
		ns.on("connection", new Emitter.Listener() {
			@Override
			public void call(Object... args) {
				SocketIoSocket socket = (SocketIoSocket) args[0];
				System.out.println("Client " + socket.getId() + " (" + socket.getInitialHeaders().get("remote_addr") + ") has connected.");

				socket.on("message", new Emitter.Listener() {
					@Override
					public void call(Object... args) {
						System.out.println("[Client " + socket.getId() + "] " + args);
						socket.send("message", "test message", 1);
					}
				});

			}
		});*/
/**
		Configuration config = new Configuration();
		config.setHostname("localhost");
		config.setPort(9094);

		final SocketIOServer server = new SocketIOServer(config);


		server.addEventListener("connection", ChatObject.class, new DataListener<ChatObject>() {

			@Override
			public void onData(SocketIOClient client, ChatObject data, AckRequest ackRequest) {
				server.getBroadcastOperations().sendEvent("message", "data");
				System.out.println("message---message");
			}
		});
		log.info("url called on server side");

		server.start();

		Thread.sleep(Integer.MAX_VALUE);

		server.stop();*/


















	/**

		package com.cardgame;


        import com.cardgame.config.SocketIO.ChatObject;
        import com.corundumstudio.socketio.AckRequest;
        import com.corundumstudio.socketio.Configuration;
        import com.corundumstudio.socketio.SocketIOClient;
        import com.corundumstudio.socketio.SocketIOServer;
        import com.corundumstudio.socketio.listener.ConnectListener;
        import com.corundumstudio.socketio.listener.DataListener;
        import com.corundumstudio.socketio.listener.DisconnectListener;

        import lombok.extern.slf4j.Slf4j;
        import org.springframework.beans.factory.annotation.Value;
        import org.springframework.boot.SpringApplication;
        import org.springframework.boot.autoconfigure.SpringBootApplication;
        import org.springframework.context.annotation.Bean;



        import java.net.URISyntaxException;



        @SpringBootApplication
        @Slf4j
        public class CardGameApplication {
        	@Value("${rt-server.host}")
        	private String host;

        	@Value("${rt-server.port}")
        	private Integer port;

        	public CardGameApplication() {
        	}

        	@Bean
        	public SocketIOServer socketIOServer() {
        		Configuration config = new Configuration();
        		config.setHostname(host);
        		config.setPort(port);
        		return new SocketIOServer(config);
        	}



        	public static void main(String[] args) throws URISyntaxException, InterruptedException {

        		SpringApplication.run(CardGameApplication.class, args);
        		workingbutnotconnectduetoversionmismatch();

        	}


        	public static void workingbutnotconnectduetoversionmismatch(){
        		Configuration config = new Configuration();
        		config.setHostname("localhost");
        		config.setPort(4000);
        		config.setOrigin("*");

        		final SocketIOServer server = new SocketIOServer(config);
        		server.addConnectListener(new ConnectListener() {
        			@Override
        			public void onConnect(SocketIOClient client) {
        				System.out.println("client.toString() "+client.getTransport().toString());
        				System.out.println("connected----------connected");
        				server.getBroadcastOperations().sendEvent("starting","works on starting");
        				client.sendEvent("start", "work");
        			}
        		});

        		server.addDisconnectListener(new DisconnectListener() {
        			@Override
        			public void onDisconnect(SocketIOClient socketIOClient) {
        				System.out.println("SOCKETIOCLIENT--DISCONNECTED "+socketIOClient.getTransport().toString());
        				System.out.println("disconnected");

        				server.addEventListener("dr", String.class, new DataListener<String>() {
        					@Override
        					public void onData(SocketIOClient socketIOClient, String s, AckRequest ackRequest) throws Exception {
        						System.out.println("Disconnected "+s+"socococ "+socketIOClient.getTransport());
        					}
        				});

        				server.getBroadcastOperations().sendEvent("disconnected","server diconnected");
        				System.out.println("socketIOClient.getNamespace().getName() "+socketIOClient.getNamespace().getName());
        			}
        		});

        		server.addEventListener("new-msg", String.class, new DataListener<String>() {
        			@Override
        			public void onData(SocketIOClient client, String data, AckRequest ackSender) throws Exception {
        				System.out.println(data);
        				System.out.println("the data "+data);
        			}
        		});

        		server.start();


        	}


        }
*/